var searchIndex = JSON.parse('{\
"cmake":{"doc":"A build dependency for running <code>cmake</code> to build a native …","i":[[3,"Config","cmake","Builder style configuration for a pending CMake build.",null,null],[5,"build","","Builds the native library rooted at <code>path</code> with the default …",null,[[["asref",8],["path",3]],["pathbuf",3]]],[11,"get_profile","","Return explicitly set profile or infer <code>CMAKE_BUILD_TYPE</code> …",0,[[],["str",15]]],[11,"new","","Creates a new blank set of configuration to build the …",0,[[["asref",8],["path",3]],["config",3]]],[11,"pic","","Sets flag for PIC. Otherwise use cc::Build platform …",0,[[["bool",15]],["config",3]]],[11,"generator","","Sets the build-tool generator (<code>-G</code>) for this compilation.",0,[[["asref",8],["osstr",3]],["config",3]]],[11,"cflag","","Adds a custom flag to pass down to the C compiler, …",0,[[["asref",8],["osstr",3]],["config",3]]],[11,"cxxflag","","Adds a custom flag to pass down to the C++ compiler, …",0,[[["asref",8],["osstr",3]],["config",3]]],[11,"asmflag","","Adds a custom flag to pass down to the ASM compiler, …",0,[[["asref",8],["osstr",3]],["config",3]]],[11,"define","","Adds a new <code>-D</code> flag to pass to cmake during the generation …",0,[[],["config",3]]],[11,"register_dep","","Registers a dependency for this compilation on the native …",0,[[["str",15]],["config",3]]],[11,"target","","Sets the target triple for this compilation.",0,[[["str",15]],["config",3]]],[11,"no_build_target","","Disables the cmake target option for this compilation.",0,[[["bool",15]],["config",3]]],[11,"host","","Sets the host triple for this compilation.",0,[[["str",15]],["config",3]]],[11,"out_dir","","Sets the output directory for this compilation.",0,[[["asref",8],["path",3]],["config",3]]],[11,"profile","","Sets the <code>CMAKE_BUILD_TYPE=build_type</code> variable.",0,[[["str",15]],["config",3]]],[11,"static_crt","","Configures whether the /MT flag or the /MD flag will be …",0,[[["bool",15]],["config",3]]],[11,"configure_arg","","Add an argument to the <code>cmake</code> configure step",0,[[["asref",8],["osstr",3]],["config",3]]],[11,"build_arg","","Add an argument to the final <code>cmake</code> build step",0,[[["asref",8],["osstr",3]],["config",3]]],[11,"env","","Configure an environment variable for the <code>cmake</code> processes …",0,[[],["config",3]]],[11,"build_target","","Sets the build target for the final <code>cmake</code> build step, …",0,[[["str",15]],["config",3]]],[11,"uses_cxx11","","Alters the default target triple on OSX to ensure that …",0,[[],["config",3]]],[11,"always_configure","","Forces CMake to always run before building the custom …",0,[[["bool",15]],["config",3]]],[11,"very_verbose","","Sets very verbose output.",0,[[["bool",15]],["config",3]]],[11,"init_c_cfg","","Initializes the C build configuration.",0,[[["build",3]],["config",3]]],[11,"init_cxx_cfg","","Initializes the C++ build configuration.",0,[[["build",3]],["config",3]]],[11,"build","","Run this configuration, compiling the library with all …",0,[[],["pathbuf",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[3,"Config"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);